generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  role           String          @default("admin")
  password       String
  avatarUrl      String?
  headline       String?
  summary        String?
  location       String?
  phone          String?
  socials        Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  achievements   Achievement[]
  certifications Certification[]
  education      Education[]
  experiences    Experience[]
  languages      Language[]
  projects       Project[]
  scanReports    ScanReport[]
  skills         Skill[]
}

model Experience {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  bullets     String[]
  techStack   String[]
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Project {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String
  repoUrl     String?
  liveUrl     String?
  tech        String[]
  highlights  String[]
  startDate   DateTime?
  endDate     DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Skill {
  id       Int    @id @default(autoincrement())
  userId   Int
  name     String
  category String
  level    String
  order    Int    @default(0)
  user     User   @relation(fields: [userId], references: [id])
}

model Education {
  id          Int       @id @default(autoincrement())
  userId      Int
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  description String?
  order       Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
}

model Certification {
  id     Int      @id @default(autoincrement())
  userId Int
  title  String
  issuer String
  date   DateTime
  link   String?
  order  Int      @default(0)
  user   User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id     Int       @id @default(autoincrement())
  userId Int
  title  String
  date   DateTime?
  link   String?
  order  Int       @default(0)
  user   User      @relation(fields: [userId], references: [id])
}

model Language {
  id     Int    @id @default(autoincrement())
  userId Int
  name   String
  level  String
  user   User   @relation(fields: [userId], references: [id])
}

model ScanReport {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String
  commitSha   String?
  runAt       DateTime @default(now())
  summary     Json
  artifactUrl String?
  user        User     @relation(fields: [userId], references: [id])
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value Json
}
